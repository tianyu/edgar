#!/usr/bin/env bash

error() {
	echo -n "ERROR: "
	for msg in "$@"; do echo -e "$msg" >&2; done
	exit 1
}

jarvis-dir() {
	local dir=$(pwd)
	cd -P .
	while [ ! -d '.jarvis' ]; do
		cd ..
		[ $(pwd) != '/' ] ||
			error 'JARVIS has not been initialized.' \
				'You can initialize JARVIS by running "'$0' init".'
	done &&
	echo $(pwd)'/.jarvis'
	cd $dir
}

db() {
	[ "$1" ] || error 'SQL not specified!'
	dbfile=$(jarvis-dir)/jarvis.db || exit 1
	sqlite3 "$dbfile" "$@" || return 1
}

init() {
	[ -e '.jarvis' ] &&
		error 'Initialization failed.' '".jarvis" already exists.'
	mkdir -p .jarvis
	db "CREATE TABLE tasks(id INTEGER PRIMARY KEY, task_group, cmd)"
}

perform() {
	while getopts :g: opt; do
		case $opt in
		g) local group=$OPTARG ;;
		\?) error 'Illegal option: -'$OPTARG \
				'Usage: '$0' [-g <group>] <cmd> [arguments]...' ;;
		esac
	done
	shift $((OPTIND-1))
	db "INSERT INTO tasks(task_group, cmd) VALUES('$group', '$*')"
}

execute() {
	while true; do
		local id=$(db 'SELECT MIN(id) FROM tasks') || error 'Could not get task id.'
		[ $id ] || return
		local group=$(db 'SELECT task_group FROM tasks WHERE id='$id) || error 'Could not get task group.'
		local cmd=$(db 'SELECT cmd FROM tasks where id='$id) || error 'Could not get command.'
		echo "Execute #$id ($group) $cmd"
		db 'DELETE FROM tasks WHERE id='$id || error 'Could not delete task #'$id'.'
	done
}

case "$1" in
'') error 'No task to do.' \
		'Usage: '$0' (init | which | <task>) [arguments]...' ;;
init) init ;;
__exec) execute ;;
*) perform $@ ;;
esac
