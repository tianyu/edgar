#!/usr/bin/env bash

error() {
	echo -n "ERROR: "
	for msg in "$@"; do echo -e "$msg" >&2; done
	exit 1
}

root-dir() {
	local dir=$(pwd)
	cd -P .
	while [ ! -d '.edgar' ]; do
		cd ..
		[ $(pwd) != '/' ] ||
			error 'Edgar has not been initialized.' \
				'You can initialize Edgar by running "'$0' init".'
	done &&
	echo $(pwd)'/.edgar'
	cd $dir
}

db() {
	[ "$1" ] || error 'SQL not specified!'
	dbfile=$(root-dir)/db || exit 1
	sqlite3 "$dbfile" "$@" || return 1
}

init() {
	[ -e '.edgar' ] &&
		error 'Initialization failed.' '".edgar" already exists.'
	mkdir -p .edgar
	db "CREATE TABLE tasks(id INTEGER PRIMARY KEY, task_group, cmd)"
}

perform() {
	while getopts :g: opt; do
		case $opt in
		g) local group=$OPTARG ;;
		\?) error 'Illegal option: -'$OPTARG \
				'Usage: '$0' [-g <group>] <cmd> [arguments]...' ;;
		esac
	done
	shift $((OPTIND-1))
	db "INSERT INTO tasks(task_group, cmd) VALUES('$group', '$*')"
	execute &
}

lock() {
	db 'CREATE TABLE lock(pid INTEGER PRIMARY KEY)' 2> /dev/null ||
		return 1
	db "INSERT INTO lock(pid) VALUES($$)"
}

unlock() {
	db 'DROP TABLE lock' || error 'Unable to unlock.'
}

execute() {
	lock || return 0

	while true; do
		local id=$(db 'SELECT MIN(id) FROM tasks') || error 'Could not get task id.'
		[ $id ] || break
		local group=$(db 'SELECT task_group FROM tasks WHERE id='$id) || error 'Could not get task group.'
		[ $group ] && id=$(db "SELECT MAX(id) FROM tasks WHERE task_group='$group'")
		local cmd=$(db 'SELECT cmd FROM tasks where id='$id) || error 'Could not get command.'

		eval $cmd

		if [ $group ]; then
			db "DELETE FROM tasks WHERE task_group='$group' AND id<=$id" ||
				error "Could not delete old tasks from group $group"
		else
			db 'DELETE FROM tasks WHERE id='$id ||
				error 'Could not delete task #'$id'.'
		fi
	done

	unlock
}

case "$1" in
'') error 'No task to do.' \
		'Usage: '$0' (init | <task>) [arguments]...' ;;
init) init ;;
*) perform $@ ;;
esac
